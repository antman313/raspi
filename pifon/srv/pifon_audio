#!/usr/bin/env python3
#
# pifon_audio
#
# detect intervals ouf loudness and generate events
# uses SoX' rec tool with ALSA driver for USB WebCam audio
#

import os
import time
import sys
import select
import inspect

# add ../../tools and ../common to python path
my_dir = os.path.split(inspect.getfile( inspect.currentframe() ))[0]
tools_dir = os.path.realpath(os.path.abspath(os.path.join(my_dir,"..","..","tools")))
if tools_dir not in sys.path:
  sys.path.insert(0, tools_dir)
commons_dir = os.path.realpath(os.path.abspath(os.path.join(my_dir,"..","common")))
if commons_dir not in sys.path:
  sys.path.insert(0, commons_dir)
  
import botio
import botopts
import pifon_opts
import detector
import recorder
    
# ----- Event Handler -----

class EventHandler:
  def __init__(self, botio):
    self.botio = botio  
  def state(self, state, peak):
    self.botio.write_line("audio_%s %d" % (state, peak))
  def update(self,peak):
    self.botio.write_line("audio_update %d" % peak)
  def trace(self, pmin, pmax):
    self.botio.write_line("audio_trace %d %d" % (pmin, pmax))      

# ---------- main ----------

def main():
  
  opts = pifon_opts.audio_opts
  
  # setup bot
  bio = botio.BotIO('audio')
  bopts = botopts.BotOpts(bio,'audio',opts,True)
  bopts.send_all()
  
  # setup audio
  ev = EventHandler(bio)
  d = detector.Detector(ev, opts)
  rec = recorder.Recorder()
  
  # start recorder
  rec.start()
  
  print("start audio",file=sys.stderr);

  # ----- main loop -----
  while True:
    # check audio data
    buf = rec.read_buf()
    if buf == False:
      break
    elif buf != None:
      d.handle_buffer(buf)
    # check for bot command
    args = bio.read_args(timeout=0.0)
    if args != None:
      bopts.parse_command(args)

  print("stop audio",file=sys.stderr);

if __name__ == '__main__':
  main()
