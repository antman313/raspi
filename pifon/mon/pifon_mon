#!/usr/bin/env python
#
# pifon_mon
#
# monitor tool to listen for pifon events and performs actions like
#

from __future__ import print_function
import os
import sys
import ConfigParser

import lcdui
import control
import botio
import audioplay
import parser
import writer
import state

def read_config(audio_play):
  """read configuration file"""
  cfg_file = os.path.join(os.path.dirname(sys.argv[0]),'pifon_mon.cfg')
  parser = ConfigParser.SafeConfigParser()
  parser.read([cfg_file])
  # submit audio options
  if parser.has_section('audio'):
    for i in parser.items('audio'):
      audio_play.set_option(i[0],i[1])

# ---------- main ----------

def main():
  bio = botio.BotIO('mon')  
  ap = audioplay.AudioPlay()
  w = writer.Writer(bio)
  s = state.State(w)
  p = parser.Parser(s)
  ui = lcdui.LCDUI()
  ctrl = control.Control(ui,s)
  s.set_control(ctrl)
  s.set_player(ap)
  
  # read configs and setup audio
  read_config(ap)
  ap.setup()
  
  # setup state
  s.setup()
  
  print("pifon_mon: started",file=sys.stderr)
  # main loop
  timeout = 0.1
  try:
    while True:
      # read args from stdin with timeout
      args = bio.read_args(timeout)
      if args != None:
        p.dispatch(args)
      # handle control events
      ctrl.handle_events()
  except KeyboardInterrupt:
    print("\npfon_mon: break -> shutting down",file=sys.stderr)
  
  ctrl.shutdown()
  
if __name__ == '__main__':
  main()
